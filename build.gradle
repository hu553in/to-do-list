plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'

    id 'io.freefair.lombok' version "$lombokPluginVersion"
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementPluginVersion"
    id 'org.springdoc.openapi-gradle-plugin' version "$springdocPluginVersion"
    id 'com.github.spotbugs' version "$spotBugsVersion"
}

group = 'com.github.hu553in'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of("$javaVersion")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
    annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:$mapStructSpringExtensionsVersion"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation "org.ehcache:ehcache:$ehcacheVersion"
    implementation "com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:$bucket4jSpringBootStarterVersion"
    implementation "com.auth0:java-jwt:$javaJwtVersion"
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.flywaydb:flyway-core'
    implementation "org.mapstruct:mapstruct:$mapStructVersion"
    implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:$mapStructSpringExtensionsVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$springdocVersion"
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"

    implementation platform("io.sentry:sentry-bom:$sentryVersion")
    implementation "io.sentry:sentry-spring-boot-starter"
    implementation "io.sentry:sentry-logback"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugsMain {
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugsTest {
    reports {
        xml.required = true
        html.required = true
    }
}

check {
    dependsOn {
        checkstyleMain
        checkstyleTest
        spotbugsMain
        spotbugsTest
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jar {
    enabled = false
}

checkstyle {
    toolVersion = "$checkstyleToolVersion"
}
